import logging
from openai import OpenAI
import pandas as pd

logging.warning("ü§ñ Rodando m√≥dulo sienge_ia.py (an√°lises autom√°ticas de dados financeiros)")

# ‚öôÔ∏è Inicializa o cliente OpenAI ‚Äî precisa da vari√°vel OPENAI_API_KEY configurada no Render
client = OpenAI()

# ==========================================================
# üîç Fun√ß√£o base de an√°lise financeira (resumo executivo)
# ==========================================================
def gerar_analise_financeira(titulo: str, dados: pd.DataFrame) -> str:
    """Gera uma an√°lise executiva com base no DataFrame de despesas/receitas."""
    try:
        if dados is None or len(dados) == 0:
            return "‚ö†Ô∏è Nenhum dado encontrado para an√°lise."

        # Amostra compacta para contexto
        preview = dados.head(40).to_markdown(index=False)

        prompt = f"""
Voc√™ √© um analista financeiro especialista em empresas de constru√ß√£o civil.
Com base nos dados abaixo, gere uma **an√°lise executiva inteligente**, contendo:
1Ô∏è‚É£ Principais destaques (receitas, despesas, lucro ou preju√≠zo);
2Ô∏è‚É£ Obras, centros de custo e fornecedores de maior impacto;
3Ô∏è‚É£ Alertas de risco ou anomalias (valores concentrados, sazonalidade, etc.);
4Ô∏è‚É£ Recomenda√ß√µes pr√°ticas (redu√ß√£o de custos, otimiza√ß√£o, renegocia√ß√£o, prioriza√ß√£o de obras);
5Ô∏è‚É£ Um pequeno resumo de tend√™ncia geral (positivo, neutro, negativo).

Formate em Markdown, com subt√≠tulos e bullet points, estilo relat√≥rio profissional.
T√≠tulo do relat√≥rio: **{titulo}**

Amostra de dados (at√© 40 linhas):
{preview}
        """

        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um consultor financeiro s√™nior e especialista em obras e constru√ß√£o civil."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.4,
            max_tokens=1000,
        )
        return resp.choices[0].message.content

    except Exception as e:
        logging.exception("‚ùå Erro na IA (gerar_analise_financeira):")
        return f"‚ùå Erro ao gerar an√°lise financeira: {e}"


# ==========================================================
# üéûÔ∏è Gera√ß√£o de Apresenta√ß√£o Estilo Gamma (slide por slide)
# ==========================================================
def gerar_apresentacao_gamma(titulo: str, dados: pd.DataFrame) -> str:
    """
    Gera uma apresenta√ß√£o executiva (modo 'Gamma') em formato de slides markdown.
    Ideal para ser exibida no dashboard Streamlit com st.markdown().
    """
    try:
        if dados is None or len(dados) == 0:
            return "‚ö†Ô∏è Nenhum dado encontrado para apresenta√ß√£o."

        # Resumo simples de dados (colunas mais relevantes)
        if "obra" in dados.columns:
            top_obras = dados["obra"].value_counts().head(5).to_dict()
        else:
            top_obras = {}

        if "fornecedor" in dados.columns:
            top_fornecedores = dados["fornecedor"].value_counts().head(5).to_dict()
        else:
            top_fornecedores = {}

        resumo_texto = f"""
Top Obras: {', '.join([f"{k} ({v})" for k, v in top_obras.items()]) if top_obras else '‚Äî'}
Top Fornecedores: {', '.join([f"{k} ({v})" for k, v in top_fornecedores.items()]) if top_fornecedores else '‚Äî'}
"""

        preview = dados.head(30).to_markdown(index=False)

        prompt = f"""
Voc√™ √© um analista financeiro s√™nior e precisa montar uma **apresenta√ß√£o estilo Gamma** 
com base nos dados financeiros abaixo.

Crie de 5 a 8 SLIDES no formato Markdown, cada um com:
- T√≠tulo (ex: "Resumo Geral", "Top Obras", "An√°lise de Custos", "Recomenda√ß√µes")
- Texto curto e direto (2‚Äì4 linhas)
- Use emojis de apoio (üí∞üìà‚ö†Ô∏èüèóÔ∏èüí°üìä)

T√≠tulo principal: {titulo}

Resumo dos dados:
{resumo_texto}

Amostra (at√© 30 linhas):
{preview}

Formate a sa√≠da em se√ß√µes assim:
## Slide 1 ‚Äî Resumo Geral
texto...

## Slide 2 ‚Äî Top Obras
texto...

## Slide 3 ‚Äî Custos e Despesas
texto...
        """

        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em apresenta√ß√µes corporativas para constru√ß√£o civil."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.6,
            max_tokens=1500,
        )

        conteudo = resp.choices[0].message.content
        return conteudo.strip()

    except Exception as e:
        logging.exception("‚ùå Erro na IA (gerar_apresentacao_gamma):")
        return f"‚ùå Erro ao gerar apresenta√ß√£o: {e}"


# ==========================================================
# üîÑ Fun√ß√£o auxiliar (unifica chamadas)
# ==========================================================
def gerar_apresentacao_financeira(titulo: str, dados: pd.DataFrame, modo="resumo") -> str:
    """
    Fun√ß√£o unificada para gerar tanto relat√≥rios resumidos quanto apresenta√ß√µes completas.
    modo="resumo" ‚Üí an√°lise textual (executiva)
    modo="gamma" ‚Üí slides estilo apresenta√ß√£o
    """
    if modo == "gamma":
        return gerar_apresentacao_gamma(titulo, dados)
    else:
        return gerar_analise_financeira(titulo, dados)
